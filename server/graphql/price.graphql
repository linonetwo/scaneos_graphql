scalar DateTime

type ChartItem {
  time: DateTime
  value: Float
}
type KChartItem {
  time: DateTime
  """开盘"""
  open: Float
  """收盘"""
  close: Float
  """最低"""
  lowest: Float
  """最高"""
  highest: Float
}

type EOSPrice {
  name: String
  rank: Int
  circulatingSupply: Float
  totalSupply: Float
  maxSupply: Float
  marketCapUsd: Float
  priceUsd: Float
  volume24hUsd: Float
  percentChange1h: Float
  percentChange24h: Float
  percentChange7d: Float
}

type EOSPriceChart {
  marketCapByAvailableSupply: [ChartItem!]
  priceBtc: [ChartItem!]
  pricePlatform: [ChartItem!]
  priceUsd: [ChartItem!]
  volumeUsd: [ChartItem!]
}

type ResourcePrice {
  supply: Float
  ramVolumn: Float
  ramMarketcap: Float
  ramPrice: Float
  netPrice: Float
  cpuPrice: Float
}
type ResourcePriceChart {
  ramPrice: [ChartItem!]!
  """
  sampleRate是一个小于一的小数用于限制返回的数据量 | limit data size by 'sampleRate'
  """
  sampledRamPrice(sampleRate: Float): [ChartItem!]!
  """
  kChartChunkSize 是K线的采样宽度,隔几个数据合并为一个蜡烛 | sample candlestick by kChartChunkSize, it is used for chunking data array
  """
  ramKChart(kChartChunkSize: Int): [KChartItem!]!
}
