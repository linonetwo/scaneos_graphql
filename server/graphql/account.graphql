# import BPInfo from "./bp.graphql"
# import PageInfo from "./pagination.graphql"
# import ActionsList from "./blockchain.graphql"

scalar DateTime
scalar JSON

type Permission {
  actor: String
  permission: String
}
type Accounts {
  permission: Permission
  weight: Int
}
type AuthKey {
  key: String!
  weight: Int!
}
type RequiredAuth {
  threshold: Int
  keys: [AuthKey]!
  accounts: [Accounts]!
  waits: [String]!
}
type Permissions {
  permName: String
  parent: String
  requiredAuth: RequiredAuth
}

type VoterInfo {
  owner: String
  proxy: String
  producers: [String]!
  staked: Int
  lastVoteWeight: String
  proxiedVoteWeight: String
  isProxy: Int
  unstaking: Int
}

type ResourceStatus {
  used: Float!
  available: Float!
  max: Float!
  weight: Float
  selfDelegatedWeight: Float
}

type Account {
  producerInfo: BPInfo
  actions(type: String, page: Int, size: Int): ActionsList!

  eosBalance: Float!
  tokenBalance(token: String): JSON
  net: ResourceStatus!
  cpu: ResourceStatus!
  ram: ResourceStatus!
  accountName: String
  headBlockNum: Int
  headBlockTime: DateTime
  privileged: Boolean
  lastCodeUpdate: DateTime
  createdAt: DateTime
  permissions: [Permissions]!
  refundRequest: String
  voterInfo: VoterInfo
}
type AccountsList {
  accounts: [Account!]
  pageInfo: PageInfo
}

type NameAuction {
  notInAuction: Boolean
  newName: String
  highBidder: String
  highBid: Float
  lastBidTime: DateTime
}
type NameAuctionsList {
  nameAuctions: [NameAuction!]
  pageInfo: PageInfo
}
