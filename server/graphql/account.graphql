# import BPInfo from "./bp.graphql"
# import PageInfo from "./pagination.graphql"
# import ActionsList from "./blockchain.graphql"

scalar DateTime
scalar JSON

type Permission {
  actor: String
  permission: String
}
type Accounts {
  permission: Permission
  weight: Int
}
type AuthKey {
  key: String!
  weight: Int!
}
type RequiredAuth {
  threshold: Int
  keys: [AuthKey]!
  accounts: [Accounts]!
  waits: [String]!
}
type Permissions {
  permName: String
  parent: String
  requiredAuth: RequiredAuth
}

type VoterInfo {
  owner: String
  proxy: String
  producers: [String]!
  staked: Float
  lastVoteWeight: String
  proxiedVoteWeight: String
  isProxy: Int
  unstaking: Float
}

type ResourceStatus {
  used: Float
  available: Float
  max: Float
  weight: Float
  selfDelegatedWeight: Float
  refund: Float
}

type Account {
  producerInfo: BPInfo
  actions(type: String, page: Int, size: Int): ActionsList!

  eosBalance: Float!
  eosStaked: Float!
  tokenBalance(token: String): JSON
  net: ResourceStatus!
  cpu: ResourceStatus!
  ram: ResourceStatus!
  accountName: String
  headBlockNum: Int
  headBlockTime: DateTime
  privileged: Boolean
  lastCodeUpdate: DateTime
  createdAt: DateTime
  permissions: [Permissions]!
  voterInfo: VoterInfo
}
type AccountsList {
  accounts: [Account!]
  pageInfo: PageInfo
}

type NameAuction {
  notInAuction: Boolean
  newName: String
  highBidder: String
  highBid: Float
  lastBidTime: DateTime
}
type NameAuctionsList {
  nameAuctions: [NameAuction!]
  pageInfo: PageInfo
}

type AccountTrend {
  eosTopAccounts: [String!]
  ramTopAccounts: [String!]
  """Ram账号的详情，注意这将返回大量数据，请保证调用acccountTrend的range参数为0"""
  ramTopAccountsDetail: [Account!]
  cpuTopAccounts: [String!]
  netTopAccounts: [String!]
  stakedTopAccounts: [String!]
  eosPosition: [Float!]
  ramPosition: [Float!]
  cpuPosition: [Float!]
  netPosition: [Float!]
  stakedPosition: [Float!]
  timestamp: DateTime!
}
